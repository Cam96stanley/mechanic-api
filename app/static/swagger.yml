swagger: "2.0"
info:
  title: Mechanic Shop API
  description: This is an API to manage a mechanic shop
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  /customers/login:
    post:
      tags:
        - Customers
      summary: Login endpoint (generates token)
      description: Validates customer credentials, generates and return a customer specific token.
      parameters:
        - in: body
          name: body
          description: Login Credentials
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: Login successful
          schema:
            $ref: "#/definitions/LoginResponse"

  /customers:
    post:
      tags:
        - Customers
      summary: Endpoint to create/register a new customer
      description: Endpoint to create a new customer in our mechanic shop system, emails and phone numbers must be unique.
      parameters:
        - in: body
          name: body
          description: Information required to create a new customer
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          description: Customer created
          schema:
            $ref: "#/definitions/CreateCustomerResponse"

    get:
      tags:
        - Customers
      summary: Returns all customers
      description: Endpoint to retrieve a list of all customers
      responses:
        200:
          description: Retrieved customers successfully
          schema:
            $ref: "#/definitions/AllCustomers"

    put:
      tags:
        - Customers
      summary: Endpoint to update a customer
      description: Endpoint to update a customer, this is a token authenticated route, and the customer must be logged in to update their account
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: Information requried to update a customer
          required: true
          schema:
            $ref: "#/definitions/UpdateCustomerPayload"
      responses:
        200:
          descriptions: Successfully updated customer
          schema:
            $ref: "#/definitions/UpdateCustomerResponse"

    delete:
      tags:
        - Customers
      summary: Endpoint to delete a customer
      description: Endpoint to delete a customer. Requires token authentication, customer must be logged in to delete their account
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successfully deleted customer
          schema:
            $ref: "#/definitions/DeleteCustomerResponse"

  /customers/{customer_id}:
    get:
      tags:
        - Customers
      summary: Endpoint to get a single customer
      description: Endpoint to retrieve a single customer
      parameters:
        - name: customer_id
          in: path
          description: ID of customer to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Retrieved customer successfully
          schema:
            $ref: "#/definitions/SingleCustomer"

  /mechanics:
    post:
      tags:
        - Mechanics
      summary: Endpoint to create a new mechanic
      description: Endpoint to create a new mechanic in our mechanic shop system, emails and phone numbers must be unique.
      parameters:
        - in: body
          name: body
          description: Information required to create a new mechanic
          required: true
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        201:
          description: Mechanic created
          schema:
            $ref: "#/definitions/CreateMechanicResponse"

    get:
      tags:
        - Mechanics
      summary: Returns all mechanics
      description: Endpoint to retrieve a list of all mechanics
      responses:
        200:
          description: Retrieved mechanics successfully
          schema:
            $ref: "#/definitions/AllMechanics"

  /mechanics/experience:
    get:
      tags:
        - Mechanics
      summary: Endpoint to request mechanics by experience
      description: Enpoint to request a list of mechanics by experience
      responses:
        200:
          description: Retrieved mechanics successfully
          schema:
            $ref: "#/definitions/AllMechanics"

  /mechanics/{mechanic_id}:
    put:
      tags:
        - Mechanics
      summary: Endpoint to update a mechanic
      description: Endpoint to update a mechanic. Email and phone number must be unique
      parameters:
        - name: mechanic_id
          in: path
          required: true
          type: string
          description: ID of the mechanic to update
        - in: body
          name: body
          description: Information required to update a mechanic
          required: true
          schema:
            $ref: "#/definitions/UpdateMechanicPayload"
      responses:
        200:
          description: Successfully updated mechanic
          schema:
            $ref: "#/definitions/UpdateMechanicResponse"

    delete:
      tags:
        - Mechanics
      summary: Endpoint to delete a single mechanic
      description: Endpoint to delete a single mechanic
      parameters:
        - name: mechanic_id
          in: path
          required: true
          type: string
          description: ID of the mechanic to delete
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Deleted mechanic successfully
          schema:
            $ref: "#/definitions/DeleteMechanicResponse"

    get:
      tags:
        - Mechanics
      summary: Endpoint to get a single mechanic
      description: Endpoint to retrieve a single mechanic
      parameters:
        - name: mechanic_id
          in: path
          description: ID of mechanic to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Retrieved mechanic successfully
          schema:
            $ref: "#/definitions/SingleMechanic"

  /inventory:
    post:
      tags:
        - Inventory
      summary: Endpoint to create an inventory item
      description: Endpoint to create a new inventory item in our mechanic shop system
      parameters:
        - in: body
          name: body
          description: Information required to create a new inventory item
          required: true
          schema:
            $ref: "#/definitions/CreateInventoryPayload"
      responses:
        201:
          description: Inventory item created
          schema:
            $ref: "#/definitions/CreateInventoryResponse"

    get:
      tags:
        - Inventory
      summary: Endpoint to retrieve all inventory items
      description: Endpoint to retrieve a list of all inventory items
      responses:
        200:
          description: Retrieved inventory items successfully
          schema:
            $ref: "#/definitions/AllInventory"

  /inventory/{inventory_id}:
    put:
      tags:
        - Inventory
      summary: Endpoint to update an inventory item
      description: Endpoint to update an existing inventory item
      parameters:
        - name: inventory_id
          in: path
          required: true
          type: string
          description: ID of the inventory item to update
        - in: body
          name: body
          description: Information required to update a inventory item
          required: true
          schema:
            $ref: "#/definitions/UpdateInventoryPayload"
      responses:
        200:
          description: Successfully updated inventory item
          schema:
            $ref: "#/definitions/UpdateInventoryResponse"

    delete:
      tags:
        - Inventory
      summary: Endpoint to delete an inventory item
      description: Endpoint to delete an inventory item
      parameters:
        - name: inventory_id
          in: path
          required: true
          type: string
          description: ID of the inventory item to delete
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Deleted inventory item successfully
          schema:
            $ref: "#/definitions/DeleteInventoryResponse"

    get:
      tags:
        - Inventory
      summary: Endpoint to retrieve an inventory item
      description: Enpoint to retrieve a single inventory item
      parameters:
        - name: inventory_id
          in: path
          description: ID of inventory item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Retrieved inventory item successfully
          schema:
            $ref: "#/definitions/SingleInventoryItem"

  /tickets:
    post:
      tags:
        - Tickets
      summary: Endpoint to create a service ticket
      description: Endpoint to create a service ticket, VIN must be unique.
      parameters:
        - in: body
          name: body
          description: Information required to create a new service ticket
          required: true
          schema:
            $ref: "#/definitions/CreateTicketPayload"
      responses:
        201:
          description: Service ticket created
          schema:
            $ref: "#/definitions/CreateTicketResponse"

    get:
      tags:
        - Tickets
      summary: Endpoint to get all tickets
      description: Endpoint to retrieve a list of all tickets
      responses:
        200:
          description: Retrieved tickets successfully
          schema:
            $ref: "#/definitions/AllTickets"

  /tickets/{ticket_id}/edit:
    put:
      tags:
        - Tickets
      summary: Endpoint to update mechanics for a service ticket
      description: Endpoint to update mechanics for a service ticket
      parameters:
        - name: ticket_id
          in: path
          required: true
          type: string
          description: ID of the service ticket to update
        - in: body
          name: body
          description: Information required to update a service ticket
          required: true
          schema:
            $ref: "#/definitions/UpdateTicketPayload"
      responses:
        200:
          description: Successfully updated inventory item
          schema:
            $ref: "#/definitions/UpdateTicketResponse"

  /tickets/my-tickets:
    get:
      tags:
        - Tickets
      summary: Endpoint to retrieve service tickets for a customer
      description: Enpoint to retrieve a list of service tickets for a currently logged in customer
      security:
        - bearerAuth: []
      responses:
        200:
          description: Retrieved inventory item successfully
          schema:
            $ref: "#/definitions/YourTickets"

  /tickets/{ticket_id}:
    get:
      tags:
        - Tickets
      summary: Endpoint to retrieve a single ticket by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Retrieved ticket successfully
          schema:
            $ref: "#/definitions/SingleTicket"

    post:
      tags:
        - Tickets
      summary: Endpoint to add an existing inventory part to a ticket
      description: Endpoint to add an existing inventory item to an existing ticket
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - in: body
          name: body
          description: Information required to add
          required: true
          schema:
            $ref: "#/definitions/UpdatePartForTicketPayload"
      responses:
        200:
          description: Successfully added inventory item
          schema:
            $ref: "#/definitions/UpdatePartForTicketResponse"

definitions:
  LoginCredentials:
    type: object
    properties:
      customer_email:
        type: string
      customer_password:
        type: string

    required:
      - customer_email
      - customer_password

  LoginResponse:
    type: object
    properties:
      token:
        type: string
      message:
        type: string
      status:
        type: string

  CreateCustomerPayload:
    type: object
    properties:
      customer_name:
        type: string
      customer_email:
        type: string
      customer_password:
        type: string
      customer_phone:
        type: string

    required:
      - customer_name
      - customer_email
      - customer_password
      - customer_phone

  CreateCustomerResponse:
    type: object
    properties:
      id:
        type: integer
      customer_name:
        type: string
      customer_email:
        type: string
      customer_password:
        type: string
      customer_phone:
        type: string

    example:
      id: 1
      customer_name: "John Doe"
      customer_email: "jdoe@example.com"
      customer_password: "test1234"
      customer_phone: "1234567890"

  AllCustomers:
    type: array
    items:
      type: object
      properties:
        id:
          type: integer
        customer_name:
          type: string
        customer_email:
          type: string
        customer_password:
          type: string
        customer_phone:
          type: string

  UpdateCustomerPayload:
    type: object
    properties:
      customer_name:
        type: string
      customer_email:
        type: string
      customer_password:
        type: string
      customer_phone:
        type: string

    required:
      - customer_name
      - customer_email
      - customer_password
      - customer_phone

  UpdateCustomerResponse:
    type: object
    properties:
      id:
        type: integer
      customer_name:
        type: string
      customer_email:
        type: string
      customer_password:
        type: string
      customer_phone:
        type: string

    example:
      id: 1
      customer_name: "John Doe"
      customer_email: "johnd@example.com"
      customer_password: "test1234"
      customer_phone: "1234567890"

  DeleteCustomerResponse:
    type: object
    properties:
      message:
        type: string
    example:
      message: "successfully deleted customer <customer_id>"

  SingleCustomer:
    type: object
    properties:
      id:
        type: integer
      customer_name:
        type: string
      customer_email:
        type: string
      customer_password:
        type: string
      customer_phone:
        type: string

  CreateMechanicPayload:
    type: object
    properties:
      mechanic_name:
        type: string
      mechanic_email:
        type: string
      mechanic_phone:
        type: string
      mechanic_salary:
        type: number
        format: float

    required:
      - mechanic_name
      - mechanic_email
      - mechanic_phone
      - mechanic_salary

    example:
      mechanic_name: "John Doe"
      mechanic_email: "jdoe@example.com"
      mechanic_phone: "1234567890"
      mechanic_salary: 60000.00

  CreateMechanicResponse:
    type: object
    properties:
      id:
        type: integer
      mechanic_name:
        type: string
      mechanic_email:
        type: string
      mechanic_phone:
        type: string
      mechanic_salary:
        type: number
        format: float

    example:
      id: 1
      mechanic_name: "John Doe"
      mechanic_email: "jdoe@example.com"
      mechanic_phone: "1234567890"
      mechanic_salary: 60000.00

  AllMechanics:
    type: array
    items:
      type: object
      properties:
        id:
          type: integer
        customer_name:
          type: string
        customer_email:
          type: string
        customer_password:
          type: string
        customer_phone:
          type: string

  UpdateMechanicPayload:
    type: object
    properties:
      mechanic_name:
        type: string
      mechanic_email:
        type: string
      mechanic_phone:
        type: string
      mechanic_salary:
        type: number
        format: float

    required:
      - mechanic_name
      - mechanic_email
      - mechanic_phone
      - mechanic_salary

  UpdateMechanicResponse:
    type: object
    properties:
      id:
        type: integer
      mechanic_name:
        type: string
      mechanic_email:
        type: string
      mechanic_phone:
        type: string
      mechanic_salary:
        type: number
        format: float

    example:
      id: 1
      mechanic_name: "John Doe"
      mechanic_email: "johnd@example.com"
      mechanic_phone: "1234567890"
      mechanic_salary: 60000.00

  DeleteMechanicResponse:
    type: object
    properties:
      message:
        type: string
    example:
      message: "successfully deleted mechanic <mechanic_id>"

  SingleMechanic:
    type: object
    properties:
      id:
        type: integer
      mechanic_name:
        type: string
      mechanic_email:
        type: string
      mechanic_phone:
        type: string
      mechanic_salary:
        type: number
        format: float

    example:
      id: 1
      mechanic_name: "John Doe"
      mechanic_email: "johnd@example.com"
      mechanic_phone: "1234567890"
      mechanic_salary: 60000.00

  CreateInventoryPayload:
    type: object
    properties:
      item_name:
        type: string
      item_price:
        type: number
        format: float

    required:
      - item_name
      - item_price

    example:
      item_name: "Firestone Tire"
      item_price: 100.00

  CreateInventoryResponse:
    type: object
    properties:
      id:
        type: integer
      item_name:
        type: string
      item_price:
        type: number
        format: float

    example:
      id: 1
      item_name: "Firestone Tire"
      item_price: 100.00

  AllInventory:
    type: array
    items:
      type: object
      properties:
        id:
          type: integer
        item_name:
          type: string
        item_price:
          type: number
          format: float

  UpdateInventoryPayload:
    type: object
    properties:
      item_name:
        type: string
      item_price:
        type: number
        format: float

    required:
      - item_name
      - item_price

  UpdateInventoryResponse:
    type: object
    properties:
      id:
        type: integer
      item_name:
        type: string
      item_price:
        type: number
        format: float

    example:
      id: 1
      item_name: "Break Pad"
      item_price: 49.99

  DeleteInventoryResponse:
    type: object
    properties:
      message:
        type: string
    example:
      message: "successfully deleted inventory item <inventory_id>"

  SingleInventoryItem:
    type: object
    properties:
      id:
        type: integer
      item_name:
        type: string
      item_price:
        type: number
        format: float

    example:
      id: 1
      item_name: "FireStone Tire"
      item_price: 100.00

  CreateTicketPayload:
    type: object
    properties:
      vin:
        type: string
      service_date:
        type: date
      service_desc:
        type: string
      customer_id:
        type: integer
      mechanic_ids:
        type: array
        items:
          type: integer

    required:
      - vin
      - service_date
      - service_desc
      - customer_id
      - mechanic_ids

    example:
      vin: "ABCdefFG123DEFghiGJE456Wert"
      service_date: "2025-05-13"
      service_desc: "Front passanger tire is flat, order and replace tire."
      customer_id: 1
      mechanic_ids: [1]

  CreateTicketResponse:
    type: object
    properties:
      id:
        type: integer
      vin:
        type: string
      service_date:
        type: date
      service_desc:
        type: string

    example:
      id: 1
      vin: "ABCdefFG123DEFghiGJE456Wert"
      service_date: "2025-05-13"
      service_desc: "Front passanger tire is flat, order and replace tire."
      service_items: []
      customer:
        customer_email: "jdoe@example.com"
        customer_name: "John Doe"
        customer_phone: "1234567890"
        id: 1
      mechanics:
        - id: 1
        - mechanic_name: "Jane Doe"

  AllTickets:
    type: array
    items:
      type: object
      properties:
        id:
          type: integer
        vin:
          type: string
        service_date:
          type: string
          format: date
        service_desc:
          type: string
        customer:
          type: object
          properties:
            id:
              type: integer
            customer_name:
              type: string
            customer_email:
              type: string
            customer_phone:
              type: string
        mechancis:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              mechanic_name:
                type: string
        service_items:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              inventory_id:
                type: integer
              quantity:
                type: integer
              inventory:
                type: object
                properties:
                  id:
                    type: integer
                  item_name:
                    type: string
                  item_price:
                    type: number
                    format: float

  UpdateTicketPayload:
    type: object
    properties:
      add_mechanic_ids:
        type: array
        items:
          type: integer
      remove_mechanic_ids:
        type: array
        items:
          type: integer
    required:
      - add_mechanic_ids
      - remove_mechanic_ids

  UpdateTicketResponse:
    type: object
    properties:
      message:
        type: string

  YourTickets:
    type: array
    properties:
      items:
        type: object
        properties:
          id:
            type: integer
          service_date:
            type: string
            format: date
          service_desc:
            type: string
          vin:
            type: string
          mechancis:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                mechanic_name:
                  type: string
          service_items:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                inventory_id:
                  type: integer
                quantity:
                  type: integer
                inventory:
                  type: object
                  properties:
                    id:
                      type: integer
                    item_name:
                      type: string
                    item_price:
                      type: number
                      format: float

    example:
      - id: 1
        mechanics: []
        service_date: "2025-05-03"
        service_desc: "Change Tires"
        service_items:
          - id: 1
            inventory:
              id: 1
              item_name: "tire"
              item_price: 200.0
            inventory_id: 1
            quantity: 2
        vin: "lkajsd;"

  SingleTicket:
    type: object
    properties:
      id:
        type: integer
      vin:
        type: string
      service_date:
        type: string
        format: date
      service_desc:
        type: string
      customer:
        type: object
        properties:
          id:
            type: integer
          customer_name:
            type: string
          customer_email:
            type: string
          customer_phone:
            type: string
      mechanics:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
            mechanic_name:
              type: string
      service_items:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
            inventory_id:
              type: integer
            quantity:
              type: integer
            inventory:
              type: object
              properties:
                id:
                  type: integer
                item_name:
                  type: string
                item_price:
                  type: number
                  format: float
    example:
      customer:
        customer_email: "joe@test.com"
        customer_name: "Joey"
        customer_phone: "845215785"
        id: 1
      customer_id: 1
      id: 1
      mechanics: []
      service_date: "2025-05-03"
      service_desc: "Change Tires"
      service_items:
        - id: 1
          inventory:
            id: 1
            item_name: "tire"
            item_price: 200.0
          inventory_id: 1
          quantity: 2
      vin: "ABJDJRGJ5245ASDEGRR575Q;"

  UpdatePartForTicketPayload:
    type: object
    properties:
      inventory_id:
        type: integer
      quantity:
        type: integer
    required:
      - inventory_id
      - quantity

  UpdatePartForTicketResponse:
    type: object
    properties:
      id:
        type: integer
      inventory:
        type: object
        properties:
          id:
            type: integer
          item_name:
            type: string
          item_price:
            type: number
            format: float
      inventory_id:
        type: integer
      quantity:
        type: integer

    example:
      id: 2
      inventory_id: 1
      quantity: 2
      inventory:
        id: 1
        item_name: "tire"
        item_price: 200.0
